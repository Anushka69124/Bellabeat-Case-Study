---
## title: "R Notebook - Emily Liang - Bellabeat Case Study"
output:
  html_document:
    df_print: paged
  html_notebook: default
  pdf_document: default
---
   Installing relevant packages
```{r}
install.packages("tidyverse")
install.packages("here")
install.packages("skimr")
install.packages("janitor")
install.packages("lubridate")

library(tidyverse)
library(here)
library(skimr)
library(janitor)
library(lubridate)
```

Step 2 : Prepare the data and preview the  data frame.
  ```{r}
daily_activity <- read.csv("/kaggle/input/fitbit/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv")

daily_sleep <- read.csv("/kaggle/input/fitbit/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/sleepDay_merged.csv")

hourly_steps <- read.csv("/kaggle/input/fitbit/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/hourlySteps_merged.csv")

head(daily_activity)
str(daily_activity)

head(daily_sleep)
str(daily_sleep)

head(hourly_steps)
str(hourly_steps)

```
Step 3 : Cleaning the data
First of all, we determine the number of unique users from each data frame.
  ```{r}
n_unique(daily_activity$Id)
n_unique(daily_sleep$Id)
n_unique(hourly_steps$Id)
```
 we check for any duplicates, if present
```{r}
  sum(duplicated(daily_activity))
sum(duplicated(daily_sleep))
sum(duplicated(hourly_steps))
```
remove duplicates and NA values from each data frame
```{r}
  install.packages("dplyr")
library(dplyr)
install.packages("tidyr")
library(tidyr)

daily_activity <- daily_activity %>% 
  distinct() %>% 
  drop_na()
head(daily_activity)

daily_sleep <- daily_sleep %>% 
  distinct() %>% 
  drop_na()
head(daily_sleep)

hourly_steps <- hourly_steps %>% 
  distinct() %>% 
  drop_na()
head(hourly_steps)
```
change the case of each column name into lowercase
```{r}
library(janitor)

clean_names(daily_activity)
clean_names(daily_sleep)
clean_names(hourly_steps)

daily_activity <- rename_with(daily_activity,tolower)
daily_sleep <- rename_with(daily_sleep,tolower)
hourly_steps <- rename_with(hourly_steps,tolower)
```
We clean the date-time format for daily_activity and daily_sleep,hourly_steps for consistency in columns while merging these two data frames.
```{r}
library(lubridate)

daily_activity <- daily_activity %>% 
  rename(date = activitydate) %>% 
  mutate(date = as_date(date,format="%m/%d/%Y"))
head(daily_activity)

daily_sleep <- daily_sleep %>% 
  rename(date = sleepday) %>% 
  mutate(date = as_date(date,format="%m/%d/%Y %I:%M:%S %p",tz=Sys.timezone()))
head(daily_sleep)

hourly_steps <- hourly_steps %>% 
  rename(date_time = activityhour) %>% 
  mutate(date_time = as.POSIXct(date_time,format="%m/%d/%Y %I:%M:%S %p",tz=Sys.timezone()))
head(hourly_steps)
```
we merge the two data frames daily_activity and daily_sleep, using id and date as primary keys.
```{r}
daily_activity_sleep <- merge(daily_activity, daily_sleep, by=c("id","date"))
head(daily_activity_sleep)
```
visualization phase of this case study
#A summary for daily data
library(dplyr)

activity_sleep <- inner_join(daily_activity, daily_sleep, by = "id")
activity_sleep_summary <- activity_sleep %>%
  select(totalsteps, calories,
         veryactiveminutes, fairlyactiveminutes, lightlyactiveminutes, sedentaryminutes,
         totalsleeprecords, totalminutesasleep, totaltimeinbed) %>%
  drop_na() %>%
  summary()
print(activity_sleep_summary)
We want to find out if there are correlations between these variables:

Daily Steps vs Calories
Daily Steps vs.Daily Sleep
```{r}
library(ggplot2) 
library(dplyr)   
activity_sleep <- activity_sleep %>%
  select(totalsteps, calories) %>%
  drop_na()  
activity_sleep$totalsteps <- as.numeric(activity_sleep$totalsteps)
activity_sleep$calories <- as.numeric(activity_sleep$calories)

ggplot(activity_sleep, aes(x = totalsteps, y = calories)) +
  geom_jitter(alpha = 0.5) + 
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), size = 0.6) +  
  geom_text(aes(x = 20000, y = 2300, label = paste0("Pearson's r = ", round(cor(totalsteps, calories), 2))),
            hjust = -0.1, vjust = 1, size = 4) +  
  labs(title = "Daily Steps vs. Calories", x = "Daily Steps", y = "Calories") + 
  theme_minimal()  
```
```{r}
activity_sleep <- activity_sleep[complete.cases(activity_sleep[, c("totalsteps", "totalminutesasleep")]), ]
ggplot(data = activity_sleep, aes(x = totalsteps, y = totalminutesasleep)) +
  geom_point(position = "jitter", alpha = 0.5, size = 2) + 
  geom_smooth(method = "auto", color = "blue", size = 0.6) +  
  labs(title = "Daily steps vs. sleep", x = "Daily steps", y = "Minutes asleep") +
  theme_minimal()
```



